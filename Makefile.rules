#
# Top-level Makefile, minus the configuration variables
#

SHELL = /bin/bash
DST =

default: all ; @# empty rule

force:

MAKEFLAGS += --no-print-directory

# Echo an arbitrary make/environment variable
echovar: force; @echo $(VARNAME)=\"$($(VARNAME))\"

# To prevent application of pass-through rule upon 'include':
Makefile $(upcxx_src)/Makefile.rules: ; @# empty rule

# TODO: default conduit selection should be at configure time
install-hook: force
	@eval $$($(MAKE) -C bld/gasnet.opt echovar VARNAME=CONDUITS) && \
	 if [[ -n "$$GASNET_CONDUIT" ]]; then                \
	   conduit_default="$$GASNET_CONDUIT";               \
	 elif expr "x$(CROSS)" : xcray-aries- >/dev/null; then \
	   conduit_default='aries';                          \
	 else                                                \
	   conduit_default='smp';                            \
	 fi &&                                               \
	 cd $(upcxx_src) &&                                  \
	 . utils/install-common.sh &&                        \
	 install_to="$(prefix)" install_common

install: force
	@$(MAKE) -C bld $@
	@$(MAKE) $@-hook

distclean-hook: force
	-[[ $(upcxx_src) = $(upcxx_bld) ]] || rm -R bld/Makefile
	-rm -R Makefile $(GASNET_UNPACKED)

distclean: force
	@$(MAKE) -C bld $@
	@$(MAKE) $@-hook

exe run: force
	@if test -z "$(SRC)"; then \
	    echo "ERROR: target '$@' requires a SRC'" >&2; \
	    echo "example: 'make $@ SRC=test/hello_upcxx.cpp'" >&2; \
	    exit 1; \
	 fi
	@$(MAKE) -C bld $@ STARTDIR="$(shell pwd)"

# Default is pass-through
# TODO?: HOOK and LOCAL "magic" like UPCR's multiconf
%: force; @$(MAKE) -C bld $@

.PHONY: force echovar
.PHONY: install install-hook
.PHONY: distclean distclean-hook
.PHONY: exe run

testprograms_seq = \
	atomics.cpp \
	collectives.cpp \
	dist_object.cpp \
	local_team.cpp \
	barrier.cpp \
	rpc_barrier.cpp \
	rpc_ff_ring.cpp \
	rput.cpp \
	vis.cpp \
	vis_stress.cpp \
	uts/uts_ranks.cpp

testprograms_par = \
	rput_thread.cpp \
	uts/uts_hybrid.cpp \
	view.cpp

check: force
	@tmpfile=.testtmp_$$$$; rm -f $$tmpfile;                  \
	 run=0; failed=0;                                         \
	 export UPCXX_BACKEND=gasnet_seq;                         \
	 for t in $(testprograms_seq); do                         \
	    echo Running $$t; : $$((++run));                      \
	    $(MAKE) run SRC=$(upcxx_src)/test/$$t &> $$tmpfile;   \
	    if [[ $$? != 0 ]] || grep -q ERROR $$tmpfile; then    \
	      echo FAILED; : $$((++failed));                      \
	    fi;                                                   \
	    grep "Test result: " $$tmpfile | sort -u;             \
	 done;                                                    \
	 export UPCXX_BACKEND=gasnet_par;                         \
	 for t in $(testprograms_par); do                         \
	    echo Running $$t; : $$((++run));                      \
	    $(MAKE) run SRC=$(upcxx_src)/test/$$t &> $$tmpfile;   \
	    if [[ $$? != 0 ]] || grep -q ERROR $$tmpfile; then    \
	      echo FAILED; : $$((++failed));                      \
	    fi;                                                   \
	    grep "Test result: " $$tmpfile | sort -u;             \
	 done;                                                    \
	 rm -f $$tmpfile;                                         \
	 if [[ $$failed = 0 ]]; then                              \
	   echo "PASSED $$run tests";                             \
	 else                                                     \
	   echo "FAILED $$failed of $$run tests";                 \
	 fi;                                                      \
	 [[ $$failed = 0 ]] # exit code
