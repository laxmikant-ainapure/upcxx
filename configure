#!/bin/bash
#
# This file is NOT generated (e.g. don't look for configure.ac).
#
# TODO:
#  + UPCXX_CUDA/nvcc handling
#  + sanitize/filter GASNET_CONFIGURE_ARGS ??

#
# Usage
#

function usage {
  cat <<'EOF'
Usage:
  --prefix=...
        Specifies the installation directory.
        The default is '/usr/local/upcxx'.

  --with-cc=...
  --with-cxx=...
        Specify the C and C++ compilers to use.
        Override the values of $CC and $CXX, if any.
        The (platform dependent) default is usually appropriate.
  --with-cross=...
        Specifies the cross-compilation target name.
        Overrides the value if $CROSS, if any.
        The (empty) default is appropriate unless cross-compiling.

  --with-default-network=...
        Specifies the default network.
        The default is system dependent.

  --with-gasnet=...
        Specifies the URL or path of GASNet sources.
        Overrides the value of $GASNET, if any.
        The default is normally sufficient.

  --with-gmake=...
        Specify the location GNU Make 3.80 or newer.
        Overrides the value of $GMAKE, if any.
        Default is to search for 'gmake' or 'make' in $PATH.

  -h|--help|--usage
        Produces this message.
  -V|--version
        Report version and copyright.

All unrecognized arguments will be passed to GASNet's configure.

Some influential environment variables:
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  CC          C compiler command
  CFLAGS      C compiler flags
  CPP         C preprocessor
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to upcxx@googlegroups.com or at https://upcxx-bugs.lbl.gov
UPC++ home page: https://upcxx.lbl.gov

See INSTALL.md for additional information.
EOF
}

function version {
  header="src/upcxx.hpp"
  version=$( (grep "#define UPCXX_VERSION" src/upcxx.hpp | head -1 | cut -d' ' -f 3 ) 2> /dev/null)
  githash=$(git describe --always 2> /dev/null)
  echo "UPC++ version $version $githash"
  echo "Copyright (c) 2020, The Regents of the University of California,"
  echo "through Lawrence Berkeley National Laboratory."
  echo "https://upcxx.lbl.gov"
  echo ""
}

#
# Global variables
#

# This script's name and location
self=$(basename $0)
UPCXX_SRC=$(cd $(dirname $(type -p $0)) && pwd -P)

# Default installation prefix
PREFIX=/usr/local/upcxx

# Undocumented "--single" mode
single=0

#
# Error handling
#

function echo_and_die {
  echo $* >&2
  exit 1
}

function failure_and_die {
  echo "UPC++ configuration failed. Please report the entire log above to: upcxx@googlegroups.com" >&2
  exit 1
}

function missing_value {
  echo "ERROR: option '$1' is missing its required value." >&2
  usage >&2
  exit 1
}

trap failure_and_die ERR  # errors are fatal

#
# Argument parsing
#

while [[ $# -gt 0 ]]; do
  case "$1" in
    --prefix=*)
      PREFIX=${1#*=}
      [[ -n $PREFIX ]] || missing_value $1
      ;;

    --with-gasnet=*)
      GASNET=${1#*=}
      [[ -n $GASNET ]] || missing_value $1
      ;;

    --with-cc=*)
      export CC=${1#*=}
      [[ -n $CC ]] || missing_value $1
      ;;

    --with-cxx=*)
      export CXX=${1#*=}
      [[ -n $CXX ]] || missing_value $1
      ;;

    --with-cross=*)
      export CROSS=${1#*=}
      [[ -n $CROSS ]] || missing_value $1
      ;;

    --with-gmake=*)
      export GMAKE=${1#*=}
      [[ -n $GMAKE ]] || missing_value $1
      ;;

    --with-default-network=*)
      export GASNET_CONDUIT=${1#*=}
      [[ -n $GASNET_CONDUIT ]] || missing_value $1
      ;;

    -h|--help|--usage)
      echo 'UPC++ configure script.'
      echo '======================='
      usage;
      exit 0;
      ;;

    -V|--version)
      version;
      exit 0;
      ;;

    # These are to remain undocumented
    -v|--verbose) set -x ;;
    --single) single=1 ;;
    --with-mpsc-queue=*)
      export UPCXX_MPSC_QUEUE=${1#*=}
      [[ -n $UPCXX_MPSC_QUEUE ]] || missing_value $1
      ;;

    # Anything we don't consume will be passed to GASNet's configure
    *)
      GASNET_CONFIGURE_ARGS+="${GASNET_CONFIGURE_ARGS+ }$1"
      ;;
  esac
  shift
done  

#
# Canonicalize $PREFIX
#

# Form a "textually canonical" path.
#
# + Result is a full path without any extraneous / or .
#
# + The input path can be relative or absolute
# + White space in path is safe and is preserved
# + The input path does not need to exist (and is not created)
#
# + Does NOT verify elems are dirs (so /etc/passwd/foo is acceptable)
# + Does NOT resolve symlinks
#
function canon_path() {
  local path="$1"

  # Make absolute if relative
  [[ "$path" =~ (^/) ]] || path="$PWD/$path"

  # Ensure trailing '/.' and '/..' are not special cases
  path="$path/"

  # Convert '//' and '/./' to '/'
  while true; do
    local tmp=$(sed -e 's|//*|/|g' -e 's|/\./|/|g' <<<"$path")
    [[ "$tmp" = "$path" ]] && break
    path="$tmp"
  done

  # Remove all 'dir/../'
  while true; do
    local tmp=$(sed -e 's|[^/][^/]*/\.\./||g' <<<"$path")
    [[ "$tmp" = "$path" ]] && break
    path="$tmp"
  done

  # Convert any leading '/../' to '/'
  while true; do
    local tmp=$(sed -e 's|^/\.\./|/|g' <<<"$path")
    [[ "$tmp" = "$path" ]] && break
    path="$tmp"
  done

  path="${path/%\//}" # removes the trailing /

  if [[ -n "$path" ]]; then echo "$path"; else echo '/'; fi
}
PREFIX=$(canon_path "$PREFIX")

#
# Default GASNet source
# Enable offline installers with an embedded GASNet-EX tarball
#
GASNET_DEFAULT='https://gasnet-bugs.lbl.gov/nightly/unlisted/GASNet-stable.tar.gz'
gex_offline=`/bin/ls "$UPCXX_SRC"/src/GASNet-{stable,2???.*}.tar.gz 2> /dev/null | sort -t. -k1,1 -k2,2n -k3n | tail -1`
if [[ -n "$GASNET" ]]; then
  : # keep defn
elif [[ -r "$gex_offline" ]]; then
  GASNET="$gex_offline"
else
  GASNET=$GASNET_DEFAULT
fi

# Default UPCXX_MPSC_QUEUE
if [[ -z "$UPCXX_MPSC_QUEUE" ]] ; then
  UPCXX_MPSC_QUEUE=atomic
else
  case "$UPCXX_MPSC_QUEUE" in
    atomic|biglock)
      ;; # OK
    *)
      echo "ERROR: UPCXX_MPSC_QUEUE='$UPCXX_MPSC_QUEUE' is not a valid value."
      echo_and_die 'See docs/build-devel.md for valid values and additional info.'
      ;;
  esac
fi

#
# system-checks
#
. $UPCXX_SRC/utils/system-checks.sh
install_to="$PREFIX" sys_info
platform_sanity_checks
platform_settings
export CC
export CXX

#
# Find a usable GNU Make
#
GMAKE_NEED_MAJ=3
GMAKE_NEED_MIN=80
function bad_gmake {
  echo Error: $* >&2
  echo_and_die "Please set GMAKE (or pass --with-gmake=...) to the path to GNU Make $GMAKE_MIN_VER or newer."
}
if [[ -n "$GMAKE" ]]; then
  if [[ -z $(type -p "$GMAKE") ]] ; then
    bad_gmake "'$GMAKE' not found."
  fi
else
  for x in gmake make; do
    tmp="$(type -p $x)" || true
    if [[ -n "$tmp" ]] ; then
      GMAKE="$tmp"
      break
    fi
  done
  if [[ -z "$GMAKE" ]] ; then
    bad_gmake "no 'gmake' or 'make' found in \$PATH."
  fi
fi
if [[ $($GMAKE --version | grep ^GNU) =~ ([0-9]+).([0-9]+)(.[0-9]+)? ]]; then
  maj=${BASH_REMATCH[1]}
  min=${BASH_REMATCH[2]}
  if [[ $maj -lt $GMAKE_NEED_MAJ ||
      ( $maj -eq $GMAKE_NEED_MAJ && $min -lt $GMAKE_NEED_MIN ) ]] ; then
    bad_gmake "'$GMAKE' is older than $GMAKE_NEED_MAJ.$GMAKE_NEED_MIN"
  fi
else
  bad_gmake "'$GMAKE' does not appear to be GNU Make"
fi
echo -e "$GMAKE\nGNU Make version ${BASH_REMATCH[0]}\n"

#
# Find a usable checksum command
# "Usable" is defined here as 32 or more alphanumerics characters
# followed by optional space
#
UPCXX_CSUMCMD=''
for cmd in shasum sha1sum md5sum md5; do
  if [[ -n $(type -p $cmd) &&
        $($cmd <<< '') =~ ^[a-zA-Z0-9]{32,}\ ? ]]; then
    UPCXX_CSUMCMD=$cmd
    break
  fi
done
set +x
if [[ -z "$UPCXX_CSUMCMD" ]]; then
  echo_and_die Unable to find a usable checksum utility
fi

#
# Default conduit
#
case $GASNET_CONDUIT in
  '')
    if [[ "$CROSS" =~ -aries- ]]; then
      GASNET_CONDUIT=aries
    else
      GASNET_CONDUIT=smp
    fi
    ;;
  udp|smp|ibv|aries)
    ;;
  mpi)
    echo -e "WARNING: $GASNET_CONDUIT is not an officially supported network.\n"
    ;;
  *)
    echo_and_die "ERROR: --with-default-network='$GASNET_CONDUIT' is not a valid network"
    ;;
esac

#
# Unpack GASNet (if required) and verify
#

function bad_gasnet_fetch {
  echo Error: $* >&2
  echo_and_die "Please correct the URL or point --with-gasnet=... at a manually downloaded GASNet source .tar.gz file ($GASNET_DEFAULT is the recommended version)"
}
ORIG_GASNET="$GASNET"
GASNET_UNPACKED=""
GASNET_TYPE=source  # default
if [[ "$single" -eq 1 && -r "$GASNET/gasnet_config.h" ]] ; then
  # single + GASNET=builddir (may or may not be a srcdir as well)
  GASNET_TYPE=build
  # Convert relative path of build directory to absolute if necessary
  if ! expr "$GASNET" : ^/ >/dev/null; then
    export GASNET=$(cd "$GASNET" && pwd -P)
  fi
elif [ -r "$GASNET/gasnet_config.h.in" ]; then
  # Convert relative path of souce directory to absolute if necessary
  if ! expr "$GASNET" : ^/ >/dev/null; then
    export GASNET=$(cd "$GASNET" && pwd -P)
  fi
elif expr "$GASNET" : '.*\.tar\.gz' >/dev/null; then
  # Unpack tarball into bld/ unless already present
  gex_dir="$PWD/bld/`basename $GASNET .tar.gz`"
  gex_tmp=''
  if [ ! -r "$gex_dir/gasnet_config.h.in" ]; then
    trap - ERR # suspend error handler for detailed diagnostics
    mkdir -p bld
    if expr "$GASNET" : http >/dev/null; then
      if [[ -n "$URL_CAT" ]] ; then
        : # keep defn
      elif [[ -n "$(type -p curl)" ]]; then
        URL_CAT='curl --retry 5 -LsSf'
      elif [[ -n "$(type -p wget)" ]]; then
        URL_CAT='wget --tries=5 -nv -O -'
      fi
      if [ -z "$URL_CAT" ]; then
        bad_gasnet_fetch "Do not know how to fetch a URL (did not find wget or curl in \$PATH)"
      fi
      gex_tmp="$gex_dir.tar.gz"
      echo Fetching $GASNET
      eval "$URL_CAT '$GASNET' >'$gex_tmp'"
      [[ $? -eq 0 && -r "$gex_tmp" ]] || bad_gasnet_fetch "Failed to fetch '$GASNET'"
      GASNET="$gex_tmp"
    else
      [ -e "$GASNET" ] || echo_and_die "File '$GASNET' does not exist"
      [ -r "$GASNET" ] || echo_and_die "Cannot read file '$GASNET'"
    fi
    echo Unpacking $GASNET
    gzip -cd "$GASNET" | ( cd bld && tar xf - )
    rc1=${PIPESTATUS[0]} rc2=${PIPESTATUS[1]}
    [ $rc1 -eq 0 ] || echo_and_die "Failed to gunzip '$GASNET' (corrupted or truncated?)"
    [ $rc2 -eq 0 ] || echo_and_die "Failed to untar '$GASNET' (corrupted or truncated?)"
    [ -r "$gex_dir/gasnet_config.h.in" ] || echo_and_die "GASNET='$ORIG_GASNET' does not appear to contain GASNet"
    trap failure_and_die ERR  # restore error handler
    [ -n "$gex_tmp" ] && rm -f "$gex_tmp"
    GASNET_UNPACKED=$gex_dir
    echo
  fi
  export GASNET="$gex_dir"
else
  echo_and_die "GASNET must point to local tarball file, tarball url, or gasnet source tree."
fi

if [[ "$GASNET_TYPE" == 'build' ]]; then
  if [ -e "$GASNET/configure" ] ; then
    gex_header="$GASNET/gasnetex.h"
  else
    gex_header=''  # TODO: any non G-1 file to check in a VPATH build directory?
  fi
  gex_spec_file="$GASNET/gasnet_config.h"
else
  gex_header="$GASNET/gasnetex.h"
  gex_spec_file="$GASNET/docs/GASNet-EX.txt"
fi

# verify distinguishing file (if any)
[[ -z "$gex_header" || -r "$gex_header" ]] || \
    echo_and_die "GASNET='$ORIG_GASNET' does not contain GASNet-EX (GASNet-1 or GASNet_Tools?)"

# verify minimum version
HAVE_MAJ=$(grep -o -m1 'EX_SPEC_VERSION_MAJOR.*' "$gex_spec_file" | cut -d' ' -f2-)
HAVE_MIN=$(grep -o -m1 'EX_SPEC_VERSION_MINOR.*' "$gex_spec_file" | cut -d' ' -f2-)
WANT_MAJ=$(grep -o -m1 'UPCXX_REQUIRES_GEX_SPEC_VERSION_MAJOR.*' $UPCXX_SRC/src/backend/gasnet/runtime_internal.hpp | cut -d' ' -f2-)
WANT_MIN=$(grep -o -m1 'UPCXX_REQUIRES_GEX_SPEC_VERSION_MINOR.*' $UPCXX_SRC/src/backend/gasnet/runtime_internal.hpp | cut -d' ' -f2-)
[[ ($HAVE_MAJ -gt $WANT_MAJ) || (($HAVE_MAJ -eq $WANT_MAJ) && ($HAVE_MIN -ge $WANT_MIN)) ]] || \
    echo_and_die "GASNET='$ORIG_GASNET' does not contain GASNet-EX implementing specification version $WANT_MAJ.$WANT_MIN or newer"

#
# Generate bld/Makefile if needed
#
mkdir -p bld
[[ $(pwd -P) = $UPCXX_SRC ]] || echo "include $UPCXX_SRC/bld/Makefile" > "bld/Makefile"

#
# Generate top-level Makefile
#
cat > Makefile <<EOF
# This file is generated by the UPC++ configure script
# Modifications to this file may be overwritten
export prefix=$PREFIX
export upcxx_src=$UPCXX_SRC
export upcxx_bld=$PWD
export GMAKE=$GMAKE
export CONFIG_CC=$CC
export CONFIG_CXX=$CXX
export GASNET=$GASNET
export GASNET_TYPE=$GASNET_TYPE
export CROSS=$CROSS
export UPCXX_CSUMCMD=$UPCXX_CSUMCMD
export UPCXX_MPSC_QUEUE=UPCXX_MPSC_QUEUE_$(tr '[a-z]' '[A-Z]' <<<$UPCXX_MPSC_QUEUE)
export GASNET_UNPACKED=$GASNET_UNPACKED
export GASNET_CONFIGURE_ARGS=$GASNET_CONFIGURE_ARGS
export GASNET_CONDUIT=$GASNET_CONDUIT
include \$(upcxx_src)/bld/Makefile.rules
EOF

#
# Generate top-level bin/
#
mkdir -p bin
cat >| bin/upcxx <<EOF
#!/bin/bash
function die { echo "ERROR: \$*" >&2; exit 1; }
vars=\$(env UPCXX_META=BUILDDIR $UPCXX_SRC/utils/upcxx.sh "\$@")
[[ \$? -ne 0 ]] && die 'pre-parse of command line failed'
vars=\${vars/UPCXX_NETWORK/GASNET_CONDUIT}
vars=\${vars/UPCXX_THREADMODE=/UPCXX_BACKEND=gasnet_}
vars=\${vars/UPCXX_CODEMODE=O3/ASSERT=0 OPTLVL=3 DBGSYM=0}
vars=\${vars/UPCXX_CODEMODE=debug/ASSERT=1 OPTLVL=0 DBGSYM=1}
echo 'INFO: may need to build the required runtime.  Please be patient.'
cmd=\$($GMAKE -s -f '$PWD/Makefile' upcxx \$vars 2> /dev/null)
[[ \$? -ne 0 ]] && die 'build of the required runtime failed.'
exec \$cmd "\$@"
EOF
cat >| bin/upcxx-run <<EOF
#!/bin/bash
function die { echo "ERROR: \$*" >&2; exit 1; }
conduit=\$($UPCXX_SRC/utils/upcxx-run -info "\$@" | grep ^GASNetConduitName: | cut -d' ' -f2 | tr '[A-Z]' '[a-z]')
[[ \$? -ne 0 ]] && die 'pre-parse of command line failed'
if [[ -d '$PWD/bld/gasnet.debug' ]]; then
  codemode=debug
elif [[ -d '$PWD/gasnet.opt' ]]; then
  codemode=opt
else
  codemode=debug
fi
echo 'INFO: may need to build the required runtime.  Please be patient.'
cmd=\$($GMAKE -s -f '$PWD/Makefile' upcxx-run GASNET_CODEMODE=\$codemode GASNET_CONDUIT=\$conduit upcxx-run 2>/dev/null)
[[ \$? -ne 0 ]] && die 'build of the required GASNet runtime failed.'
exec \$cmd "\$@"
EOF
chmod a+rx bin/upcxx bin/upcxx-run

#
# Remove any (potentially out-of-date) GASNet builds to ensure they are reconfigured
#
[[ -d bld/gasnet.opt   ]] && rm -Rf bld/gasnet.opt
[[ -d bld/gasnet.debug ]] && rm -Rf bld/gasnet.debug

#
# Simplify logic when using a GASNet build directory (--single only)
# Only one of gasnet.opt or gasnet.debug is used, but we don't know/care which
#
if [[ "$GASNET_TYPE" == 'build' ]]; then
  ln -s "$GASNET" bld/gasnet.opt
  ln -s "$GASNET" bld/gasnet.debug
fi

#
# Final instructions
#
cat << EOF
UPC++ configuration complete.
Recommended next steps:
  1. '$GMAKE all'
  2. '$GMAKE check'
  3. '$GMAKE install'
EOF

[[ "$single" -eq 1 ]] && \
  echo -e '\n********\nWARNING: --single mode enabled.  Many make targets will fail.\n********\n'
exit 0
