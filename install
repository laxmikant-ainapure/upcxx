#!/bin/bash

function usage {
  cat<<EOF
Usage: ./install <install-to-path>
  See INSTALL.md for instructions.
EOF
}

function failure_and_die {
  echo "UPC++ Installation failed. Please report the entire log above to: upcxx@googlegroups.com" >&2
  exit 1
}

function echo_and_die {
  echo $* >&2
  exit 1
}

if [[ "$1" = "-h" || "$1" = "--help" ]]; then
  usage
  exit 0
elif [ "$#" -eq 1 ]; then
  single=0
  install_to="$1"
elif [ "$#" -eq 2 ]; then
  if [ "$1" != "--single" ]; then
    >&2 usage
    exit 1
  fi
  single=1
  install_to="$2"
else
  >&2 usage
  exit 1
fi

# Enable offline installers with an embedded GASNet-EX tarball
gex_offline=`/bin/ls "$PWD"/src/GASNet-2???.*.tar.gz 2> /dev/null | sort -t. -k1,1 -k2,2n -k3n | tail -1`
if [ -n "$GASNET" ] ; then
  : # Keep user's value
elif [ -r "$gex_offline" ]; then
  export GASNET="$gex_offline"
else
  export GASNET='https://gasnet-bugs.lbl.gov/nightly/unlisted/GASNet-stable.tar.gz'
fi

trap failure_and_die ERR

# Absify a directory name that may not yet exist
mkdir -p "$install_to"
install_to=$(cd "$install_to" && pwd -P)

. utils/system-checks.sh
sys_info
platform_sanity_checks
platform_settings
export CC
export CXX

# TODO: autoconf or cmake can/should enforce GNU make
GMAKE=${UPCXX_MAKE:-make -j8}

# TODO: autoconf or cmake can/should find a usable URL fetcher
if [ -n "$URL_CAT" ] ; then
  : # keep denf
elif [ -n "$(type -p curl)" ]; then
  URL_CAT='curl --retry 5 -LsSf'
elif [ -n "$(type -p wget)" ]; then
  URL_CAT='wget --tries=5 -nv -O -'
fi

# Fetch and/or unpack GASNet-EX
ORIG_GASNET="$GASNET"
if [ -r "$GASNET/gasnet_config.h.in" ]; then
  # Convert relative path of souce directory to absolute if necessary
  if ! expr "$GASNET" : / >/dev/null; then
    export GASNET=$(cd "$GASNET" && pwd -P)
  fi
elif expr "$GASNET" : '.*\.tar\.gz' >/dev/null; then
  # Unpack tarball into bld/ unless already present
  gex_dir="$PWD/bld/`basename $GASNET .tar.gz`"
  gex_tmp=''
  if [ ! -r "$gex_dir/gasnet_config.h.in" ]; then
    trap - ERR # suspend error handler for detailed diagnostics
    mkdir -p bld
    if expr "$GASNET" : http >/dev/null; then
      if [ -z "$URL_CAT" ]; then
        echo_and_die "Do not know how to fetch a URL (did not find wget or curl)"
      fi
      gex_tmp="$gex_dir.tar.gz"
      eval "$URL_CAT '$GASNET' >'$gex_tmp'"
      [[ $? -eq 0 && -r "$gex_tmp" ]] || echo_and_die "Failed to fetch '$GASNET'"
      GASNET="$gex_tmp"
    else
      [ -e "$GASNET" ] || echo_and_die "File '$GASNET' does not exist"
      [ -r "$GASNET" ] || echo_and_die "Cannot read file '$GASNET'"
    fi
    gzip -cd "$GASNET" | ( cd bld && tar xf - )
    rc1=${PIPESTATUS[0]} rc2=${PIPESTATUS[1]}
    [ $rc1 -eq 0 ] || echo_and_die "Failed to gunzip '$GASNET' (corrupted or truncated?)"
    [ $rc2 -eq 0 ] || echo_and_die "Failed to untar '$GASNET' (corrupted or truncated?)"
    [ -r "$gex_dir/gasnet_config.h.in" ] || echo_and_die "GASNET='$ORIG_GASNET' does not appear to contain GASNet"
    trap failure_and_die ERR  # restore error handler
    [ -n "$gex_tmp" ] && rm -f "$gex_tmp"
  fi
  export GASNET="$gex_dir"
else
  echo_and_die "GASNET must point to local tarball file, tarball url, or gasnet source tree."
fi

# verify distinguishing files
[ -r "$GASNET/gasnetex.h" ] || \
    echo_and_die "GASNET='$ORIG_GASNET' does not contain GASNet-EX (GASNet-1 or GASNet_Tools?)"

# verify minimum version
HAVE_MAJ=$(grep -o -m1 'GEX_SPEC_VERSION_MAJOR.*' "$GASNET/docs/GASNet-EX.txt" | cut -d' ' -f2-)
HAVE_MIN=$(grep -o -m1 'GEX_SPEC_VERSION_MINOR.*' "$GASNET/docs/GASNet-EX.txt" | cut -d' ' -f2-)
WANT_MAJ=$(grep -o -m1 'UPCXX_REQUIRES_GEX_SPEC_VERSION_MAJOR.*' src/backend/gasnet/runtime_internal.hpp | cut -d' ' -f2-)
WANT_MIN=$(grep -o -m1 'UPCXX_REQUIRES_GEX_SPEC_VERSION_MINOR.*' src/backend/gasnet/runtime_internal.hpp | cut -d' ' -f2-)
[[ ($HAVE_MAJ -gt $WANT_MAJ) || (($HAVE_MAJ -eq $WANT_MAJ) && ($HAVE_MIN -ge $WANT_MIN)) ]] || \
    echo_and_die "GASNET='$ORIG_GASNET' does not contain GASNet-EX implementing specification version $WANT_MAJ.$WANT_MIN or newer"

MAKE_CMD="$GMAKE -C bld upcxx_src='$PWD' prefix='${install_to}' GASNET='$GASNET'"

if [ "$single" -eq 1 ]; then
  eval $MAKE_CMD install-single
  if [ $? -ne 0 ]; then failure_and_die; fi
else
  eval $MAKE_CMD install
  if [ $? -ne 0 ]; then failure_and_die; fi
  
  eval $($GMAKE --no-print-directory -C bld/gasnet.opt echovar VARNAME=CONDUITS)
  conduits_pipes="${CONDUITS// /|}"
  conduits_commas="${CONDUITS// /, }"
  if expr "x$CROSS" : xcray-aries- >/dev/null; then
    conduit_default='aries'
  else
    conduit_default='smp'
  fi
  
  . utils/install-common.sh
  install_common
fi

echo "UPC++ successfully installed"
