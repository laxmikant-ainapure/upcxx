src/ contains the source for the ODE solver discussed in lecture
rb.m is a matlab version of the application

The run file gives command line options for various runs.

This program will iterate over the solution and take timings.

For a fixed value of N, the answer computed by this code should be
independent of the number of processors (modulo roundoff).
This is important, or otherwise we will have difficulty
in determining whether or not our code is correct!

The code may be run with various command line options as follows.

-n <int>        Number of unknowns
-i <int>        Number of iterations
-f <int>        Frequency of convergence check in iterations
-e <double>     Convergence threshold
-k 		Shut off communication (answers will be incorrect)
-p              Print out convergence information

Thus, the command line 

<launch the program on 4 processors> ./rb -k -n 1000 -f 100000 -i 1000000 -p -e 0.001 

will run rb on 4 processors over a 1000  element interval
for 1,000,000 iterations.

The convergence threshold is 0.001, convergence information will be checked
every 100,000th iteration, and the changing convergence value will be printed
out at the terminal.

To collect timing information you should omit the -p since
it will result in I/O that could affect your timings.

Recall that this method converges very slowly (O(n^2)), so if
you want to run to converge,  keep n small enough that the
computation will converge in a few seconds.
A starting value of n=1000 on 1 processor is about right.


To understand performance, however, you'll need to make n
much larger.  I good starting value is about 100,000
In this case, you won't be able to run to convergence

Prints out convergence information
rb  -n 262144 -i 100 -f 4 -e 0.0001 -p
rb -n 262144 -i 100 -f 4 -e 0.0001
