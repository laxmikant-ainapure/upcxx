#
# Top-level Makefile, minus the configuration variables
#

SHELL = /bin/bash
DST =

default: all ; @: # empty rule

force:

MAKEFLAGS += --no-print-directory

# Echo an arbitrary make/environment variable
echovar: force; @echo $(VARNAME)=\"$($(VARNAME))\"

# To prevent application of pass-through rule upon 'include':
Makefile $(upcxx_src)/bld/Makefile.rules: ; @: # empty rule

BLDDIR = $(upcxx_bld)/bld

install-hook: force
	@eval $$(MAKEFLAGS='$(filter-out d -d --debug=%,$(MAKEFLAGS))' $(MAKE) -C $(BLDDIR)/gasnet.opt echovar VARNAME=CONDUITS) && \
	 cd $(upcxx_src) &&                                  \
	 . utils/install-common.sh &&                        \
	 conduit_default="$$GASNET_CONDUIT" &&               \
	 install_to="$(prefix)" install_common

install install-opt install-debug: force
	@$(MAKE) -C $(BLDDIR) $@ || $(MAKE) failure TARGET=installation
	@$(MAKE) install-hook || $(MAKE) failure TARGET=installation
	@echo; \
	 echo 'UPC++ installation complete.'; \
	 echo 'Recommended next steps: [ref docs TBD]'

all all-opt all-debug: force
	@$(MAKE) -C $(BLDDIR) $@ || $(MAKE) failure TARGET=build
	@echo; \
	 echo 'UPC++ build complete.';    \
	 echo 'Recommended next steps:';  \
	 echo "  1. '$(GMAKE) check'";    \
	 echo "  2. '$(GMAKE) install'"

distclean-hook: force
	-[[ $(upcxx_src) = $(upcxx_bld) ]] || rm -R $(BLDDIR)/Makefile
	-rm -Rf $(upcxx_bld)/Makefile $(upcxx_bld)/bin/upcxx $(upcxx_bld)/bin/upcxx-run $(GASNET_UNPACKED)

distclean: force
	@$(MAKE) -C $(BLDDIR) $@
	@$(MAKE) $@-hook

EXE_VPATH = "$(upcxx_src)/test" "$(upcxx_src)/example" "$(upcxx_src)/bench"
exe run: force
	@if test -z "$(SRC)"; then \
	    echo "ERROR: target '$@' requires a SRC" >&2; \
	    echo "example: 'make $@ SRC=test/hello_upcxx.cpp'" >&2; \
	    exit 1; \
	 fi
	@src=$(SRC);                                                   \
	 if [[ ! -f "$(SRC)" && "$(SRC)" != /* ]]; then                \
	   for d in $$(find $(EXE_VPATH) -type d); do                  \
	     if [[ -f "$$d/$(SRC)" ]]; then                            \
	       src="$$d/$(SRC)"; break;                                \
	     fi                                                        \
	   done;                                                       \
	   if [[ -z "$$src" ]]; then                                   \
	    echo "ERROR: file SRC='$(SRC)' does not exist" >&2;        \
	    exit 1;                                                    \
	   fi                                                          \
	 fi;                                                           \
	 $(MAKE) -C $(BLDDIR) $@ SRC="$$src" STARTDIR="$(shell pwd)"

# Default is pass-through
# TODO?: HOOK and LOCAL "magic" like UPCR's multiconf
%: force; @$(MAKE) -C $(BLDDIR) $@

failure: force
	@echo -e '\n********\nUPC++ $(TARGET) failed. Please report the ENTIRE log above to: upcxx@googlegroups.com\n********\n' >&2
	@exit 1

.PHONY: force echovar failure
.PHONY: install install-hook
.PHONY: distclean distclean-hook
.PHONY: exe run

testprograms_seq = \
	atomics.cpp \
	collectives.cpp \
	dist_object.cpp \
	local_team.cpp \
	barrier.cpp \
	rpc_barrier.cpp \
	rpc_ff_ring.cpp \
	rput.cpp \
	vis.cpp \
	vis_stress.cpp \
	uts/uts_ranks.cpp

testprograms_par = \
	rput_thread.cpp \
	uts/uts_hybrid.cpp \
	view.cpp

check: force
	@tmpfile=.testtmp_$$$$; rm -f $$tmpfile;                  \
	 run=0; failed=0;                                         \
	 export UPCXX_BACKEND=gasnet_seq;                         \
	 for t in $(testprograms_seq); do                         \
	    echo Running $$t; : $$((++run));                      \
	    $(MAKE) run SRC=$(upcxx_src)/test/$$t &> $$tmpfile;   \
	    if [[ $$? != 0 ]] || grep -q ERROR $$tmpfile; then    \
	      echo FAILED; : $$((++failed));                      \
	    fi;                                                   \
	    grep "Test result: " $$tmpfile | sort -u;             \
	 done;                                                    \
	 export UPCXX_BACKEND=gasnet_par;                         \
	 for t in $(testprograms_par); do                         \
	    echo Running $$t; : $$((++run));                      \
	    $(MAKE) run SRC=$(upcxx_src)/test/$$t &> $$tmpfile;   \
	    if [[ $$? != 0 ]] || grep -q ERROR $$tmpfile; then    \
	      echo FAILED; : $$((++failed));                      \
	    fi;                                                   \
	    grep "Test result: " $$tmpfile | sort -u;             \
	 done;                                                    \
	 rm -f $$tmpfile;                                         \
	 if [[ $$failed = 0 ]]; then                              \
	   echo "PASSED $$run tests";                             \
	   echo "If you have not already, you may now '$(GMAKE) install'"; \
	 else                                                     \
	   echo "FAILED $$failed of $$run tests";                 \
	   $(MAKE) failure TARGET=check;                          \
	 fi;                                                      \
	 [[ $$failed = 0 ]] # exit code

.NOTPARALLEL:
