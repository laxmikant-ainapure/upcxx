#!/bin/bash

CONDUIT_WHITELIST='udp|smp|ibv|aries'

if [[ "$1" = "-h" || "$1" = "--help" ]]; then
    cat<<EOF
Usage: RANKS=<ranks> CONDUIT=<${CONDUIT_WHITELIST}> ./run-tests
  Defaults to a reasonable number of RANKS for the current system, and
  the udp CONDUIT. Setting CROSS is required for cross-compilation
  based platforms (Cray XC). See docs/testing.md for more information.
EOF
    exit 0
fi
    
. utils/system-checks.sh
sys_info

echo "Checking platform..."
platform_sanity_checks
platform_settings

# Check for supported conduits
eval "case '$CONDUIT' in
  $CONDUIT_WHITELIST) ;;
                  '') export CONDUIT=udp ;;
                   *) echo 'WARNING: CONDUIT=$CONDUIT has not been validated with UPC++' ;;
esac"
echo "Using $CONDUIT conduit (set environment variable CONDUIT=<$CONDUIT_WHITELIST> to change)"

# Choose a good default RANK count
if [ -z "$RANKS" ]; then
    export CORES=`getconf _NPROCESSORS_ONLN`
    export RANKS=$(($CORES/2))     # default to using half the cores
    RANKS=$(($RANKS<2?2:$RANKS))   # but use at least two
    RANKS=$(($RANKS>16?16:$RANKS)) # but not more than 16
    echo "Detected $CORES hardware threads, running with RANKS=$RANKS (set environment variable RANKS=<ranks> to change)"
fi
echo "Running tests on $RANKS ranks"

TMPDIR=$PWD/.testdir_$$
mkdir $TMPDIR
cd $TMPDIR

check_result() {
    RESULT=$1
    if test -n "$UPCXX_VERBOSE" ; then
      cat .run-tests.err
    fi
    if test $RESULT -ne 0 || grep "ERROR" .run-tests.err ; then
        echo -e "\e[91m$2 failed, the trace can be found in $TMPDIR/run-tests.err\e[0m"
        # force a flush
        cat .run-tests.err > run-tests.err
        rm .run-tests.err
        exit 1
    fi
}

export GASNET_CONDUIT=$CONDUIT
export GASNET_BACKTRACE=${GASNET_BACKTRACE:=1}
# default to debugging mode
export ASSERT=${ASSERT:=1}
export DBGSYM=${DBGSYM:=1}
export OPTLEV=${OPTLEV:=0}

echo "Setting up upcxx... (this may take a while)"

[[ -e Makefile || -e bld/Makefile ]] || ../configure --prefix=inst &> .run-tests.err
check_result $? "Setup (configure)"
rm -f .run-tests.err

UPCXX_BACKEND=gasnet_seq make exe SRC=../test/hello_upcxx.cpp &> .run-tests.err
check_result $? "Setup (seq)"
rm .run-tests.err

UPCXX_BACKEND=gasnet_par make exe SRC=../test/hello_upcxx.cpp &> .run-tests.err
check_result $? "Setup (par)"
rm .run-tests.err

run_test() {
    echo "Running test $1"
    make run SRC="../test/$1"  &> .run-tests.err
    check_result $? "Test"
    grep "Test result: " .run-tests.err
    rm .run-tests.err
}

# Tests that do NOT require thread-safety
export UPCXX_BACKEND=gasnet_seq
eval $(make echovar VARNAME=testprograms_seq)
for test in $testprograms_seq; do run_test $test; done

# Tests requiring the thread-safe backend
export UPCXX_BACKEND=gasnet_par
eval $(make echovar VARNAME=testprograms_par)
for test in $testprograms_seq; do run_test $test; done

echo -e "\e[92mAll tests succeded\e[0m"

cd ..
rm -rf $TMPDIR

exit 0
