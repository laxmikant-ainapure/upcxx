#!/bin/bash

export GASNET_BACKTRACE=1

if [ "$1" == "-h" ]; then
    echo "Usage: RANKS=<ranks> CONDUIT=<smp|udp> ./run-tests"
    echo "  Defaults to the number of available hardware threads for RANKS, and the udp CONDUIT"
    exit 0
fi
    
. sourceme
rm -rf .nobs

. utils/system-checks.sh
sys_info

echo "Checking platform..."
platform_sanity_checks

# Check for supported conduits
if [ -z "$CONDUIT" ]; then
    export CONDUIT=udp
elif [ "$CONDUIT" != "udp" ] && [ "$CONDUIT" != "smp" ]; then
    echo "At this point, only the udp and smp conduits are supported"
    echo "Set CONDUIT=smp or CONDUIT=udp"
    exit 0
fi
echo "Using $CONDUIT conduit (set environment variable CONDUIT=<smp|udp> to change)"

echo "Setting up upcxx... (this may take a while)"

export GASNET_CONDUIT=$CONDUIT
export GASNET_INSTALL_TO=.nobs/gasnet_conduit

# always install the debug version for the test
nobs install src/upcxx.cpp ${GASNET_INSTALL_TO}/upcxx.debug.gasnet1_seq.${GASNET_CONDUIT} &> .run-tests.err

if [ $? -ne 0 ]; then
		echo "Set up failed, here is the trace:"
		cat .run-tests.err
    rm .run-tests.err
    rm -rf .nobs
		exit 0
fi
rm .run-tests.err

cd test

# Run on all available cores by default - this works on Mac and Linux
if [ -z "$RANKS" ]; then
    RANKS=`getconf _NPROCESSORS_ONLN`
    echo "Detected $RANKS hardware threads (set environment variable RANKS=<ranks> to change)"
fi
export GASNET_PSHM_NODES=${RANKS}

run_test() {
		echo "Running test $1"
    if [ "$GASNET_CONDUIT" == "udp" ]; then
        NOBS_EXE=$(nobs exe $1 2> .run-tests.err)
        ${GASNET_INSTALL_TO}/bin/amudprun -np $RANKS -spawn L $NOBS_EXE > .run-tests.out 2>> .run-tests.err
    else
        # assumes smp conduit
		    nobs run $1 > .run-tests.out 2> .run-tests.err
    fi
    
		err=$?
		grep "Test result: " .run-tests.out
		if [ $err -ne 0 ]; then
				echo -e "\e[91mTest failed, here is the trace:\e[0m"
				cat .run-tests.err
				rm .run-tests.err
				exit $err
		fi
		rm .run-tests.err
}

echo "Running tests on $RANKS ranks..."

run_test "atomics.cpp"
run_test "collectives.cpp"
run_test "dist_object.cpp"
run_test "future.cpp"
run_test "lpc_barrier.cpp"
run_test "rpc_barrier.cpp"
run_test "rpc_ff_ring.cpp"
run_test "rput.cpp"
run_test "uts/uts_ranks.cpp"
run_test "uts/uts_threads.cpp"
UPCXX_BACKEND=gasnetex_par run_test "uts/uts_hybrid.cpp"

echo -e "\e[92mAll tests succeded\e[0m"

cd ..

rm -rf .nobs
